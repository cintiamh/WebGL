// Generated by CoffeeScript 1.4.0
(function() {
  var ASPECT, BLOCK_SIZE, Block, FAR, HEIGHT, MAX_DEPTH, NEAR, REFRESH_RATE, Shape, TABLE_DEPTH, TABLE_HEIGHT, TABLE_WIDTH, VIEW_ANGLE, WIDTH, addPoints, animate, bar_shape, boundingBox, camera, canvas, cube, l_shape, mountain_shape, points, renderer, s_shape, scene, square_shape, start_time, staticBlocks, stepTime;

  WIDTH = 600;

  HEIGHT = 600;

  REFRESH_RATE = 60;

  TABLE_WIDTH = 6;

  TABLE_HEIGHT = 6;

  TABLE_DEPTH = 20;

  MAX_DEPTH = 14;

  BLOCK_SIZE = WIDTH / TABLE_WIDTH;

  VIEW_ANGLE = 45;

  ASPECT = WIDTH / HEIGHT;

  NEAR = 0.1;

  FAR = 10000;

  stepTime = 1000;

  points = 0;

  staticBlocks = [];

  canvas = $('#canvas');

  renderer = new THREE.WebGLRenderer;

  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);

  scene = new THREE.Scene;

  scene.add(camera);

  camera.position.z = TABLE_DEPTH * BLOCK_SIZE / 2 + 225;

  renderer.setSize(WIDTH, HEIGHT);

  canvas.append(renderer.domElement);

  boundingBox = new THREE.Mesh(new THREE.CubeGeometry(TABLE_WIDTH * BLOCK_SIZE, TABLE_HEIGHT * BLOCK_SIZE, TABLE_DEPTH * BLOCK_SIZE, TABLE_WIDTH, TABLE_HEIGHT, TABLE_DEPTH), new THREE.MeshBasicMaterial({
    color: 0xFFAA00,
    wireframe: true
  }));

  scene.add(boundingBox);

  Block = (function() {

    function Block(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.color = 0xFF0000;
      this.active = true;
      this.cube = null;
    }

    Block.prototype.setColor = function(color) {
      return this.color = color;
    };

    Block.prototype.draw = function() {
      if (this.active) {
        this.active = true;
        this.cube = new THREE.Mesh(new THREE.CubeGeometry(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), new THREE.MeshBasicMaterial({
          color: this.color
        }));
        this.calculate_pos();
        return scene.add(this.cube);
      }
    };

    Block.prototype.print = function() {
      return console.log(this.cube.position.x + ", " + this.cube.position.y + ", " + this.cube.position.z);
    };

    Block.prototype.calculate_pos = function() {
      this.cube.position.x = (TABLE_WIDTH / 2 + (this.x - (TABLE_WIDTH - 0.5))) * BLOCK_SIZE;
      this.cube.position.y = -(TABLE_HEIGHT / 2 + (this.y - (TABLE_HEIGHT - 0.5))) * BLOCK_SIZE;
      return this.cube.position.z = (this.z - TABLE_DEPTH / 2 + 0.5) * BLOCK_SIZE;
    };

    return Block;

  })();

  Shape = (function() {

    function Shape(points) {
      this.blocks = points.map(function(_arg) {
        var x, y, z;
        x = _arg[0], y = _arg[1], z = _arg[2];
        return new Block(x, y, z);
      });
      this.position = {
        x: 0,
        y: 0,
        z: 0
      };
      this.width = 0;
      this.height = 0;
    }

    Shape.prototype.draw = function() {
      return this.blocks.forEach(function(b) {
        return b.draw();
      });
    };

    Shape.prototype.set_size = function(width, height) {
      this.width = width;
      this.height = height;
    };

    Shape.prototype.set_position = function(x, y, z) {
      return this.blocks.forEach(function(b) {
        b.x += x;
        b.y += y;
        b.z += z;
        return b.calculate_pos();
      });
    };

    return Shape;

  })();

  square_shape = new Shape([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0]]);

  l_shape = new Shape([[0, 0, 0], [1, 0, 0], [1, 1, 0], [1, 2, 0]]);

  bar_shape = new Shape([[0, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0]]);

  mountain_shape = new Shape([[0, 1, 0], [1, 0, 0], [1, 1, 0], [2, 1, 0]]);

  s_shape = new Shape([[0, 0, 0], [1, 0, 0], [1, 1, 0], [2, 1, 0]]);

  cube = new Block(0, 0, 0);

  cube.draw();

  addPoints = function(n) {
    return points += n;
  };

  renderer.render(scene, camera);

  start_time = $.now();

  animate = function(t) {
    if ($.now() - start_time >= stepTime) {
      start_time = $.now();
      cube.z += 1;
      console.log(cube.z);
      cube.calculate_pos();
    }
    renderer.clear();
    renderer.render(scene, camera);
    $('#points').text(points);
    return window.requestAnimationFrame(animate, renderer.domElement);
  };

  animate($.now());

}).call(this);
