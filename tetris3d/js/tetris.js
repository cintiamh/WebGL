// Generated by CoffeeScript 1.4.0
(function() {
  var ASPECT, BLOCK_SIZE, Block, FAR, HEIGHT, NEAR, REFRESH_RATE, TABLE_DEPTH, TABLE_HEIGHT, TABLE_WIDTH, VIEW_ANGLE, WIDTH, animate, block, block2, boundingBox, camera, canvas, points, renderer, scene, staticBlocks, stepTime;

  WIDTH = 600;

  HEIGHT = 600;

  REFRESH_RATE = 60;

  TABLE_WIDTH = 6;

  TABLE_HEIGHT = 6;

  TABLE_DEPTH = 20;

  BLOCK_SIZE = WIDTH / TABLE_WIDTH;

  VIEW_ANGLE = 45;

  ASPECT = WIDTH / HEIGHT;

  NEAR = 0.1;

  FAR = 10000;

  stepTime = 1000;

  points = 0;

  staticBlocks = [];

  canvas = $('#canvas');

  renderer = new THREE.WebGLRenderer;

  camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);

  scene = new THREE.Scene;

  scene.add(camera);

  camera.position.z = TABLE_DEPTH * BLOCK_SIZE / 2 + 225;

  renderer.setSize(WIDTH, HEIGHT);

  canvas.append(renderer.domElement);

  Block = (function() {

    function Block(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.color = 0xFF0000;
      this.active = false;
      this.position = {};
      this.position.x = (TABLE_WIDTH / 2 + (this.x - (TABLE_WIDTH - 0.5))) * BLOCK_SIZE;
      this.position.y = -(TABLE_HEIGHT / 2 + (this.y - (TABLE_HEIGHT - 0.5))) * BLOCK_SIZE;
      this.position.z = (this.z - TABLE_DEPTH / 2 + 0.5) * BLOCK_SIZE;
    }

    Block.prototype.setColor = function(color) {
      return this.color = color;
    };

    Block.prototype.draw = function() {
      var cube;
      if (!this.active) {
        this.active = true;
        cube = new THREE.Mesh(new THREE.CubeGeometry(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), new THREE.MeshBasicMaterial({
          color: this.color
        }));
        cube.position.x = this.position.x;
        cube.position.y = this.position.y;
        cube.position.z = this.position.z;
        return scene.add(cube);
      }
    };

    Block.prototype.print = function() {
      return console.log(this.position.x + ", " + this.position.y + ", " + this.position.z);
    };

    return Block;

  })();

  boundingBox = new THREE.Mesh(new THREE.CubeGeometry(TABLE_WIDTH * BLOCK_SIZE, TABLE_HEIGHT * BLOCK_SIZE, TABLE_DEPTH * BLOCK_SIZE, TABLE_WIDTH, TABLE_HEIGHT, TABLE_DEPTH), new THREE.MeshBasicMaterial({
    color: 0xFFAA00,
    wireframe: true
  }));

  scene.add(boundingBox);

  block = new Block(0, 0, 0);

  block.print();

  block.draw();

  block2 = new Block(5, 5, 0);

  block2.setColor(0x00FF00);

  block2.draw();

  renderer.render(scene, camera);

  animate = function(t) {
    renderer.render(scene, camera);
    return window.requestAnimationFrame(animate, renderer.domElement);
  };

  animate($.now());

}).call(this);
